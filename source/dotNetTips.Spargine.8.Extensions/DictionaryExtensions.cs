// ***********************************************************************
// Assembly         : DotNetTips.Spargine.8.Extensions
// Author           : David McCarter
// Created          : 11-21-2020
//
// Last Modified By : David McCarter
// Last Modified On : 04-01-2025
// ***********************************************************************
// <copyright file="DictionaryExtensions.cs" company="McCarter Consulting">
//     Copyright (c) David McCarter - dotNetTips.com. All rights reserved.
// </copyright>
// <summary>Extension methods for IDictionary types.</summary>
// ***********************************************************************
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Frozen;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using DotNetTips.Spargine.Core;

//`![Spargine 8 -  #RockYourCode](6219C891F6330C65927FA249E739AC1F.png;https://bit.ly/Spargine )

namespace DotNetTips.Spargine.Extensions;

/// <summary>
/// Provides extension methods for <see cref="IDictionary{TKey, TValue}"/> to enhance dictionary functionality.
/// This includes methods for adding or updating entries, converting dictionaries to various forms,
/// disposing dictionary items, and more.
/// </summary>
[Information(Documentation = "https://bit.ly/SpargineDictionaryExtensions", Status = Status.Available)]
public static class DictionaryExtensions
{
	/// <summary>
	/// Processes the specified collection to dispose its items.
	/// </summary>
	/// <param name="items">The collection of items to process for disposal.</param>
	/// <remarks>
	/// This method iterates over the collection and disposes each item that implements <see cref="IDisposable"/>.
	/// It's a utility method to ensure resources are properly released for collections of disposable items.
	/// </remarks>
	private static void ProcessCollectionToDispose(this IEnumerable items)
	{
		if (items.HasItems())
		{
			foreach (var item in items)
			{
				if (item is IDisposable disposeItem)
				{
					disposeItem.TryDispose();
				}
			}
		}
	}

	/// <summary>
	/// Adds the specified keyFunction and valueFunction to the dictionary if the keyFunction does not already exist.
	/// </summary>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to add to.</param>
	/// <param name="key">The keyFunction of the element to add.</param>
	/// <param name="value">The valueFunction of the element to add. It must not be null.</param>
	/// <returns>true if the keyFunction/valueFunction pair was added to the dictionary successfully; otherwise, false.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection" />, <paramref name="key" />, or <paramref name="value" /> is null.</exception>
	[Information("From .NET Core source.", author: "David McCarter", createdOn: "7/15/2020", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.NotRequired, Status = Status.Available)]
	public static bool AddIfNotExists<TKey, TValue>(this IDictionary<TKey, TValue> collection, TKey key, in TValue value)
		where TKey : notnull
		where TValue : notnull
	{
		if (value is null)
		{
			return false;
		}

		key = key.ArgumentNotNull();
		collection = collection.ArgumentNotNull();

		if (collection.ContainsKey(key) is false)
		{
			collection.Add(key, value);
			return true;
		}

		return false;
	}


	/// <summary>
	/// Adds a range of keyFunction/valueFunction pairs to the dictionary. Each item from the specified collection is added to the dictionary
	/// if the keyFunction generated by the keyFunction selector does not already exist in the dictionary.
	/// </summary>
	/// <typeparam name="T">The type of the items in the collection.</typeparam>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to add the items to.</param>
	/// <param name="items">The collection of items to add to the dictionary.</param>
	/// <param name="keyFunction">A valueFunction to extract the keyFunction from each item.</param>
	/// <param name="valueFunction">A valueFunction to extract the valueFunction from each item.</param>
	/// <returns><c>true</c> if at least one item was added to the dictionary; otherwise, <c>false</c>.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection"/>, <paramref name="items"/>, <paramref name="keyFunction"/>, or <paramref name="valueFunction"/> is null.</exception>
	[DebuggerStepThrough]
	[Information(nameof(AddRange), "David McCarter", "11/21/2020", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static bool AddRange<T, TKey, TValue>(this IDictionary<TKey, TValue> collection, IEnumerable<T> items, Func<T, TKey> keyFunction, Func<T, TValue> valueFunction)
		where TKey : notnull
		where TValue : notnull
	{
		if (valueFunction is null)
		{
			return false;
		}

		if (items.CheckItemsExists() is false)
		{
			return false;
		}


		keyFunction = keyFunction.ArgumentNotNull();
		collection = collection.ArgumentNotNull();

		var added = false;

		foreach (var item in items)
		{
			var itemKey = keyFunction(item);
			var itemValue = valueFunction(item);

			if (!collection.ContainsKey(itemKey))
			{
				collection.Add(itemKey, itemValue);
				added = true;
			}
		}

		return added;
	}

	/// <summary>
	/// Disposes all disposable items within the dictionary. Each valueFunction in the dictionary that implements <see cref="IDisposable"/> will be disposed.
	/// </summary>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary, which must implement <see cref="IDisposable"/> if they are to be disposed.</typeparam>
	/// <param name="collection">The dictionary containing the items to dispose.</param>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection"/> is null.</exception>
	[Information(nameof(DisposeCollection), "David McCarter", "11/21/2020", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.NotRequired, Status = Status.Available)]
	public static void DisposeCollection<TKey, TValue>(this IDictionary<TKey, TValue> collection)
		where TKey : notnull
		where TValue : notnull => ProcessCollectionToDispose(collection.Select(p => p.Value));

	/// <summary>
	/// Gets the valueFunction associated with the specified keyFunction or adds it if the keyFunction does not exist.
	/// </summary>
	/// <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to search or add to.</param>
	/// <param name="key">The keyFunction of the valueFunction to get or add.</param>
	/// <param name="value">The valueFunction to add if the keyFunction does not exist.</param>
	/// <returns>The valueFunction associated with the specified keyFunction.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection" />, <paramref name="key" />, or <paramref name="value" /> is null.</exception>
	[Information("From .NET Core source.", author: "David McCarter", createdOn: "7/15/2020", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.Completed, Status = Status.Available)]
	public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> collection, TKey key, TValue value)
		where TKey : notnull
		where TValue : notnull
	{
		value = value.ArgumentNotNull();
		key = key.ArgumentNotNull();
		collection = collection.ArgumentNotNull();

		if (collection.TryGetValue(key, out var item) is false)
		{
			collection.Add(key, value);
			item = value;
		}

		return item;
	}

	/// <summary>
	/// Determines whether the dictionary has any items that match the specified condition.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The dictionary.</param>
	/// <param name="actionPredicate">The actionPredicate.</param>
	/// <returns><c>true</c> if the specified actionPredicate has items; otherwise, <c>false</c>.</returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[Information(nameof(HasItems), author: "David McCarter", createdOn: "6/15/2022", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.Completed, Status = Status.Available)]
	public static bool HasItems<TKey, TValue>(this IDictionary<TKey, TValue> collection, Func<KeyValuePair<TKey, TValue>, bool> actionPredicate) => collection is not null && actionPredicate is not null && collection.Any(actionPredicate);

	/// <summary>
	/// Converts to a <see cref="IDictionary{TKey, TValue}" /> to a <see cref="ConcurrentDictionary{TKey, TValue}" />.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The collection.</param>
	/// <returns>ConcurrentDictionary&lt;TKey, TValue&gt;.</returns>
	[Information(nameof(ToSortedDictionary), "David McCarter", "7/23/2022", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static ConcurrentDictionary<TKey, TValue> ToConcurrentDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection) => new(collection.ArgumentNotNull());

	/// <summary>
	/// Converts <see cref="IDictionary" /> to delimited string using ObjectPool to improve performance.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The list.</param>
	/// <param name="delimiter">The delimiter.</param>
	/// <returns>System.String.</returns>
	/// <example>Output:
	/// pfCfZQFGPWYXBlUvVHNb]ZjBO_LTbQBSCYb: pfCfZQFGPWYXBlUvVHNb]ZjBO_LTbQBSCYb,
	/// Dnadh[d`FP^SjNeChCvVuBXuEl^yVFUbKXsaacsCpJuxAscU: Dnadh[d`FP^SjNeChCvVuBXuEl^yVFUbKXsaacsCpJuxAscU.
	/// </example>
	[Information(nameof(ToDelimitedString), "David McCarter", "11/03/2020", "11/21/2020", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static string ToDelimitedString<TKey, TValue>(this IDictionary<TKey, TValue> collection, [ConstantExpected] char delimiter = ControlChars.Comma) => FastStringBuilder.ToDelimitedString((Dictionary<TKey, TValue>)collection, delimiter);

	/// <summary>
	/// Converts a <see cref="IDictionary{TKey, TValue}" /> to <see cref="FrozenDictionary{TKey, TValue}" />.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="list">The list.</param>
	/// <returns>FrozenDictionary&lt;TKey, TValue&gt;.</returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[Information(nameof(ToFrozenDictionary), "David McCarter", "6/3/2024", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static FrozenDictionary<TKey, TValue> ToFrozenDictionary<TKey, TValue>(this IDictionary<TKey, TValue> list) => FrozenDictionary.ToFrozenDictionary(list);

	/// <summary>
	/// Converts <see cref="IDictionary{TKey, TValue}" /> to <see cref="ImmutableDictionary{TKey, TValue}" />.
	/// Validates that <paramref name="collection" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The values.</param>
	/// <returns>IImmutableDictionary&lt;TKey, TValue&gt;.</returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[Information(nameof(ToImmutableDictionary), "David McCarter", "11/21/2020", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection) => ImmutableDictionary.CreateRange(collection.ArgumentNotNull());

	/// <summary>
	/// Converts <see cref="IDictionary{TKey, TValue}" /> to <see cref="ImmutableSortedDictionary{TKey, TValue}" />.
	/// Validates that <paramref name="collection" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The values.</param>
	/// <returns>ImmutableSortedDictionary&lt;TKey, TValue&gt;.</returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[Information(nameof(ToImmutableSortedDictionary), "David McCarter", "7/3/2024", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection) => ImmutableSortedDictionary.CreateRange(collection.ArgumentNotNull());

	/// <summary>
	/// Converts the dictionary to a lookup valueFunction that returns the valueFunction for a given keyFunction or a default valueFunction if the keyFunction is not found.
	/// </summary>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to convert to a lookup valueFunction.</param>
	/// <param name="defaultValue">The default valueFunction to return if the keyFunction is not found.</param>
	/// <returns>A valueFunction that takes a keyFunction and returns the corresponding valueFunction or the default valueFunction if the keyFunction is not found.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection"/> is null.</exception>
	[Information("Original code by Simon Painter.", author: "David McCarter", createdOn: "1/3/2025", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.Completed, Status = Status.Available)]
	public static Func<TKey, TValue> ToLookupWithDefault<TKey, TValue>(this IDictionary<TKey, TValue> collection, TValue defaultValue)
	where TKey : notnull
	{
		collection = collection.ArgumentNotNull();

		return x => collection.TryGetValue(x, out var val) ? val : defaultValue;
	}

	/// <summary>
	/// Converts to a <see cref="IDictionary{TKey, TValue}" /> to a <see cref="ReadOnlyCollection{KeyValuePair}" />.
	/// </summary>
	/// <typeparam name="TKey">The type of the keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the valueFunction.</typeparam>
	/// <param name="dictionary">The dictionary.</param>
	/// <returns>ReadOnlyCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.</returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	[Information(nameof(ToReadOnlyCollection), "David McCarter", "11/6/2023", OptimizationStatus = OptimizationStatus.Completed, BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static ReadOnlyCollection<KeyValuePair<TKey, TValue>> ToReadOnlyCollection<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) => new([.. dictionary.ArgumentNotNull()]);

	/// <summary>
	/// Converts <see cref="IDictionary{TKey, TValue}" /> to <see cref="ReadOnlyDictionary{TKey, TValue}" />.
	/// Validates that <paramref name="collection" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The values.</param>
	/// <returns>ReadOnlyDictionary&lt;TKey, TValue&gt;.</returns>
	[Information(nameof(ToReadOnlyDictionary), "David McCarter", "6/3/2024", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static ReadOnlyDictionary<TKey, TValue> ToReadOnlyDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection) => new(collection.ArgumentNotNull());


	/// <summary>
	/// Converts a <see cref="IDictionary{TKey, TValue}" /> to a <see cref="SortedDictionary{TKey, TValue}" />./&gt;
	/// Validates that <paramref name="collection" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The dictionary.</param>
	/// <returns>SortedDictionary&lt;TKey, TValue&gt;.</returns>
	[Information(nameof(ToSortedDictionary), "David McCarter", "6/27/2022", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static SortedDictionary<TKey, TValue> ToSortedDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection) => new(collection.ArgumentNotNull());

	/// <summary>
	/// Converts a <see cref="IDictionary{TKey, TValue}" /> to a <see cref="SortedDictionary{TKey, TValue}" /> using the specified comparer.
	/// </summary>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to convert.</param>
	/// <param name="comparer">The comparer to use for sorting the keys.</param>
	/// <returns>A <see cref="SortedDictionary{TKey, TValue}" /> containing the elements from the original dictionary, sorted according to the specified comparer.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
	[Information(nameof(ToSortedDictionary), BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static SortedDictionary<TKey, TValue> ToSortedDictionary<TKey, TValue>(this IDictionary<TKey, TValue> collection, IComparer<TKey> comparer) => new(collection.ArgumentNotNull(), comparer.ArgumentNotNull());

	/// <summary>
	/// Tries to get the valueFunction associated with the specified keyFunction. If the keyFunction does not exist, the specified valueFunction is used to generate a valueFunction, which is then added to the dictionary.
	/// </summary>
	/// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
	/// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
	/// <param name="collection">The dictionary to search or add to.</param>
	/// <param name="key">The keyFunction of the valueFunction to get or add.</param>
	/// <param name="valueFunction">The valueFunction to generate a valueFunction if the keyFunction does not exist.</param>
	/// <returns>The valueFunction associated with the specified keyFunction, or the valueFunction generated by the valueFunction if the keyFunction does not exist.</returns>
	/// <exception cref="ArgumentNullException">Thrown if <paramref name="collection"/> or <paramref name="valueFunction"/> is null.</exception>
	[Information("Original code by Simon Painter.", author: "David McCarter", createdOn: "1/3/2025", UnitTestStatus = UnitTestStatus.Completed, OptimizationStatus = OptimizationStatus.None, BenchmarkStatus = BenchmarkStatus.Completed, Status = Status.Available)]
	public static TValue TryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> collection, TKey key, Func<TKey, TValue> valueFunction)
		where TKey : notnull
		where TValue : notnull
	{
		collection = collection.ArgumentNotNull();
		key = key.ArgumentNotNull();

		if (collection.TryGetValue(key, out var value))
		{
			return value;
		}

		valueFunction = valueFunction.ArgumentNotNull();

		var newValue = valueFunction(key);
		collection.Add(key, newValue);

		return newValue;
	}

	/// <summary>
	/// Upserts the specified item into the <see cref="IDictionary{TKey, TValue}" />.
	/// Validates that <paramref name="collection" /> and <paramref name="item" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The dictionary.</param>
	/// <param name="item">The item.</param>
	[Information(nameof(Upsert), "David McCarter", "5/2/2021", BenchmarkStatus = BenchmarkStatus.Completed, UnitTestStatus = UnitTestStatus.Completed, Status = Status.Available)]
	public static void Upsert<TKey, TValue>(this IDictionary<TKey, TValue> collection, in TValue item) where TValue : IDataModel<TValue, TKey>
	{
		if (item is null)
		{
			return;
		}

		collection = collection.ArgumentNotNull();

		if (collection.ContainsKey(item.Id))
		{
			_ = collection.Remove(item.Id);
		}

		collection.Add(item.Id, item);
	}

	/// <summary>
	/// Inserts or updates the item into a <see cref="IDictionary{TKey, TValue}" />.
	/// Validates that <paramref name="collection" />, <paramref name="key" /> and
	/// <paramref name="item" /> is not null.
	/// </summary>
	/// <typeparam name="TKey">The type of the t keyFunction.</typeparam>
	/// <typeparam name="TValue">The type of the t valueFunction.</typeparam>
	/// <param name="collection">The dictionary.</param>
	/// <param name="key">The keyFunction.</param>
	/// <param name="item">The valueFunction.</param>
	/// <returns>TValue.</returns>
	/// <exception cref="ArgumentNullException">dictionary</exception>
	/// <exception cref="ArgumentNullException">keyFunction</exception>
	/// <exception cref="ArgumentNullException">valueFunction</exception>
	/// <exception cref="ArgumentNullException">Input cannot be null or have no items in the collection.</exception>
	/// <exception cref="ArgumentNullException">Key cannot be null.</exception>
	[Information("From .NET Core source.", author: "David McCarter", createdOn: "7/15/2020", UnitTestStatus = UnitTestStatus.Completed, BenchmarkStatus = BenchmarkStatus.Completed, Status = Status.Available)]
	public static void Upsert<TKey, TValue>(this IDictionary<TKey, TValue> collection, TKey key, in TValue item)
	{
		if (item is null)
		{
			return;
		}

		key = key.ArgumentNotNull();
		collection = collection.ArgumentNotNull();

		if (collection.ContainsKey(key))
		{
			_ = collection.Remove(key);
		}

		collection.Add(key, item);
	}

}
